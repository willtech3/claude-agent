AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Claude Agent Backend API

Globals:
  Function:
    Timeout: 30
    Runtime: python3.12
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        REDIS_URL: !Sub 'redis://${RedisHost}:6379'
        DATABASE_URL: !Sub 'postgresql://${DBUsername}:${DBPassword}@${DBHost}:5432/${DBName}'
        AWS_ENDPOINT_URL: !If 
          - IsLocal
          - http://localstack:4566
          - !Ref AWS::NoValue

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
  DBHost:
    Type: String
    Default: postgres
  DBName:
    Type: String
    Default: claude_agent
  DBUsername:
    Type: String
    Default: claude
  DBPassword:
    Type: String
    Default: claude_dev_password
    NoEcho: true
  RedisHost:
    Type: String
    Default: redis

Conditions:
  IsLocal: !Equals [!Ref Environment, development]

Resources:
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: app.main.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
        RootEvent:
          Type: Api
          Properties:
            Path: /
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
              Resource: !GetAtt TaskQueue.Arn
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource: !Sub '${FilesBucket.Arn}/*'

  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-projects'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: userId-index
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-tasks'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: projectId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: projectId-index
          KeySchema:
            - AttributeName: projectId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  TaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-tasks'
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600  # 14 days

  FilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-files-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
  TaskQueueUrl:
    Description: SQS Queue URL for tasks
    Value: !Ref TaskQueue
  FilesBucketName:
    Description: S3 bucket for file storage
    Value: !Ref FilesBucket